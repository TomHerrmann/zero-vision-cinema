/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from "@payloadcms/db-vercel-postgres";
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  timestamp,
  varchar,
  numeric,
  integer,
  jsonb,
  boolean,
  pgEnum,
} from "@payloadcms/db-vercel-postgres/drizzle/pg-core";
import { sql, relations } from "@payloadcms/db-vercel-postgres/drizzle";
export const enum_events_status = pgEnum("enum_events_status", [
  "draft",
  "published",
]);
export const enum__events_v_version_status = pgEnum(
  "enum__events_v_version_status",
  ["draft", "published"],
);

export const users = pgTable(
  "users",
  {
    id: serial("id").primaryKey(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    email: varchar("email").notNull(),
    resetPasswordToken: varchar("reset_password_token"),
    resetPasswordExpiration: timestamp("reset_password_expiration", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar("salt"),
    hash: varchar("hash"),
    loginAttempts: numeric("login_attempts").default("0"),
    lockUntil: timestamp("lock_until", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
  },
  (columns) => ({
    users_updated_at_idx: index("users_updated_at_idx").on(columns.updatedAt),
    users_created_at_idx: index("users_created_at_idx").on(columns.createdAt),
    users_email_idx: uniqueIndex("users_email_idx").on(columns.email),
  }),
);

export const media = pgTable(
  "media",
  {
    id: serial("id").primaryKey(),
    alt: varchar("alt").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    url: varchar("url"),
    thumbnailURL: varchar("thumbnail_u_r_l"),
    filename: varchar("filename"),
    mimeType: varchar("mime_type"),
    filesize: numeric("filesize"),
    width: numeric("width"),
    height: numeric("height"),
    focalX: numeric("focal_x"),
    focalY: numeric("focal_y"),
  },
  (columns) => ({
    media_updated_at_idx: index("media_updated_at_idx").on(columns.updatedAt),
    media_created_at_idx: index("media_created_at_idx").on(columns.createdAt),
    media_filename_idx: uniqueIndex("media_filename_idx").on(columns.filename),
  }),
);

export const locations = pgTable(
  "locations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name").notNull(),
    address: varchar("address").notNull(),
    city: varchar("city").notNull(),
    state: varchar("state").notNull(),
    zip: numeric("zip").notNull(),
    url: varchar("url").notNull(),
    logo: integer("logo_id").references(() => media.id, {
      onDelete: "set null",
    }),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    locations_logo_idx: index("locations_logo_idx").on(columns.logo),
    locations_updated_at_idx: index("locations_updated_at_idx").on(
      columns.updatedAt,
    ),
    locations_created_at_idx: index("locations_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const events = pgTable(
  "events",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    description: jsonb("description"),
    image: integer("image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    price: numeric("price"),
    location: integer("location_id").references(() => locations.id, {
      onDelete: "set null",
    }),
    datetime: timestamp("datetime", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    paymentLink: varchar("payment_link"),
    productId: varchar("product_id"),
    ticketLimit: numeric("ticket_limit"),
    ticketsSold: numeric("tickets_sold").default("0"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    _status: enum_events_status("_status").default("draft"),
  },
  (columns) => ({
    events_image_idx: index("events_image_idx").on(columns.image),
    events_location_idx: index("events_location_idx").on(columns.location),
    events_updated_at_idx: index("events_updated_at_idx").on(columns.updatedAt),
    events_created_at_idx: index("events_created_at_idx").on(columns.createdAt),
    events__status_idx: index("events__status_idx").on(columns._status),
  }),
);

export const _events_v = pgTable(
  "_events_v",
  {
    id: serial("id").primaryKey(),
    parent: integer("parent_id").references(() => events.id, {
      onDelete: "set null",
    }),
    version_name: varchar("version_name"),
    version_description: jsonb("version_description"),
    version_image: integer("version_image_id").references(() => media.id, {
      onDelete: "set null",
    }),
    version_price: numeric("version_price"),
    version_location: integer("version_location_id").references(
      () => locations.id,
      {
        onDelete: "set null",
      },
    ),
    version_datetime: timestamp("version_datetime", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_paymentLink: varchar("version_payment_link"),
    version_productId: varchar("version_product_id"),
    version_ticketLimit: numeric("version_ticket_limit"),
    version_ticketsSold: numeric("version_tickets_sold").default("0"),
    version_updatedAt: timestamp("version_updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version_createdAt: timestamp("version_created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }),
    version__status:
      enum__events_v_version_status("version__status").default("draft"),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    latest: boolean("latest"),
  },
  (columns) => ({
    _events_v_parent_idx: index("_events_v_parent_idx").on(columns.parent),
    _events_v_version_version_image_idx: index(
      "_events_v_version_version_image_idx",
    ).on(columns.version_image),
    _events_v_version_version_location_idx: index(
      "_events_v_version_version_location_idx",
    ).on(columns.version_location),
    _events_v_version_version_updated_at_idx: index(
      "_events_v_version_version_updated_at_idx",
    ).on(columns.version_updatedAt),
    _events_v_version_version_created_at_idx: index(
      "_events_v_version_version_created_at_idx",
    ).on(columns.version_createdAt),
    _events_v_version_version__status_idx: index(
      "_events_v_version_version__status_idx",
    ).on(columns.version__status),
    _events_v_created_at_idx: index("_events_v_created_at_idx").on(
      columns.createdAt,
    ),
    _events_v_updated_at_idx: index("_events_v_updated_at_idx").on(
      columns.updatedAt,
    ),
    _events_v_latest_idx: index("_events_v_latest_idx").on(columns.latest),
  }),
);

export const purchases = pgTable(
  "purchases",
  {
    id: serial("id").primaryKey(),
    productId: varchar("product_id").notNull(),
    price: numeric("price").notNull(),
    amountPaid: numeric("amount_paid").notNull(),
    quantity: numeric("quantity").notNull(),
    customerId: varchar("customer_id").notNull(),
    transactionDate: timestamp("transaction_date", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    }).notNull(),
    receiptUrl: varchar("receipt_url").notNull(),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    purchases_updated_at_idx: index("purchases_updated_at_idx").on(
      columns.updatedAt,
    ),
    purchases_created_at_idx: index("purchases_created_at_idx").on(
      columns.createdAt,
    ),
  }),
);

export const purchases_rels = pgTable(
  "purchases_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    eventsID: integer("events_id"),
    merchID: integer("merch_id"),
  },
  (columns) => ({
    order: index("purchases_rels_order_idx").on(columns.order),
    parentIdx: index("purchases_rels_parent_idx").on(columns.parent),
    pathIdx: index("purchases_rels_path_idx").on(columns.path),
    purchases_rels_events_id_idx: index("purchases_rels_events_id_idx").on(
      columns.eventsID,
    ),
    purchases_rels_merch_id_idx: index("purchases_rels_merch_id_idx").on(
      columns.merchID,
    ),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [purchases.id],
      name: "purchases_rels_parent_fk",
    }).onDelete("cascade"),
    eventsIdFk: foreignKey({
      columns: [columns["eventsID"]],
      foreignColumns: [events.id],
      name: "purchases_rels_events_fk",
    }).onDelete("cascade"),
    merchIdFk: foreignKey({
      columns: [columns["merchID"]],
      foreignColumns: [merch.id],
      name: "purchases_rels_merch_fk",
    }).onDelete("cascade"),
  }),
);

export const merch = pgTable(
  "merch",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    productId: varchar("product_id"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    merch_updated_at_idx: index("merch_updated_at_idx").on(columns.updatedAt),
    merch_created_at_idx: index("merch_created_at_idx").on(columns.createdAt),
  }),
);

export const payload_locked_documents = pgTable(
  "payload_locked_documents",
  {
    id: serial("id").primaryKey(),
    globalSlug: varchar("global_slug"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index(
      "payload_locked_documents_global_slug_idx",
    ).on(columns.globalSlug),
    payload_locked_documents_updated_at_idx: index(
      "payload_locked_documents_updated_at_idx",
    ).on(columns.updatedAt),
    payload_locked_documents_created_at_idx: index(
      "payload_locked_documents_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_locked_documents_rels = pgTable(
  "payload_locked_documents_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
    mediaID: integer("media_id"),
    locationsID: integer("locations_id"),
    eventsID: integer("events_id"),
    purchasesID: integer("purchases_id"),
    merchID: integer("merch_id"),
  },
  (columns) => ({
    order: index("payload_locked_documents_rels_order_idx").on(columns.order),
    parentIdx: index("payload_locked_documents_rels_parent_idx").on(
      columns.parent,
    ),
    pathIdx: index("payload_locked_documents_rels_path_idx").on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      "payload_locked_documents_rels_users_id_idx",
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      "payload_locked_documents_rels_media_id_idx",
    ).on(columns.mediaID),
    payload_locked_documents_rels_locations_id_idx: index(
      "payload_locked_documents_rels_locations_id_idx",
    ).on(columns.locationsID),
    payload_locked_documents_rels_events_id_idx: index(
      "payload_locked_documents_rels_events_id_idx",
    ).on(columns.eventsID),
    payload_locked_documents_rels_purchases_id_idx: index(
      "payload_locked_documents_rels_purchases_id_idx",
    ).on(columns.purchasesID),
    payload_locked_documents_rels_merch_id_idx: index(
      "payload_locked_documents_rels_merch_id_idx",
    ).on(columns.merchID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_locked_documents.id],
      name: "payload_locked_documents_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_locked_documents_rels_users_fk",
    }).onDelete("cascade"),
    mediaIdFk: foreignKey({
      columns: [columns["mediaID"]],
      foreignColumns: [media.id],
      name: "payload_locked_documents_rels_media_fk",
    }).onDelete("cascade"),
    locationsIdFk: foreignKey({
      columns: [columns["locationsID"]],
      foreignColumns: [locations.id],
      name: "payload_locked_documents_rels_locations_fk",
    }).onDelete("cascade"),
    eventsIdFk: foreignKey({
      columns: [columns["eventsID"]],
      foreignColumns: [events.id],
      name: "payload_locked_documents_rels_events_fk",
    }).onDelete("cascade"),
    purchasesIdFk: foreignKey({
      columns: [columns["purchasesID"]],
      foreignColumns: [purchases.id],
      name: "payload_locked_documents_rels_purchases_fk",
    }).onDelete("cascade"),
    merchIdFk: foreignKey({
      columns: [columns["merchID"]],
      foreignColumns: [merch.id],
      name: "payload_locked_documents_rels_merch_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_preferences = pgTable(
  "payload_preferences",
  {
    id: serial("id").primaryKey(),
    key: varchar("key"),
    value: jsonb("value"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index("payload_preferences_key_idx").on(
      columns.key,
    ),
    payload_preferences_updated_at_idx: index(
      "payload_preferences_updated_at_idx",
    ).on(columns.updatedAt),
    payload_preferences_created_at_idx: index(
      "payload_preferences_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const payload_preferences_rels = pgTable(
  "payload_preferences_rels",
  {
    id: serial("id").primaryKey(),
    order: integer("order"),
    parent: integer("parent_id").notNull(),
    path: varchar("path").notNull(),
    usersID: integer("users_id"),
  },
  (columns) => ({
    order: index("payload_preferences_rels_order_idx").on(columns.order),
    parentIdx: index("payload_preferences_rels_parent_idx").on(columns.parent),
    pathIdx: index("payload_preferences_rels_path_idx").on(columns.path),
    payload_preferences_rels_users_id_idx: index(
      "payload_preferences_rels_users_id_idx",
    ).on(columns.usersID),
    parentFk: foreignKey({
      columns: [columns["parent"]],
      foreignColumns: [payload_preferences.id],
      name: "payload_preferences_rels_parent_fk",
    }).onDelete("cascade"),
    usersIdFk: foreignKey({
      columns: [columns["usersID"]],
      foreignColumns: [users.id],
      name: "payload_preferences_rels_users_fk",
    }).onDelete("cascade"),
  }),
);

export const payload_migrations = pgTable(
  "payload_migrations",
  {
    id: serial("id").primaryKey(),
    name: varchar("name"),
    batch: numeric("batch"),
    updatedAt: timestamp("updated_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
    createdAt: timestamp("created_at", {
      mode: "string",
      withTimezone: true,
      precision: 3,
    })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index(
      "payload_migrations_updated_at_idx",
    ).on(columns.updatedAt),
    payload_migrations_created_at_idx: index(
      "payload_migrations_created_at_idx",
    ).on(columns.createdAt),
  }),
);

export const relations_users = relations(users, () => ({}));
export const relations_media = relations(media, () => ({}));
export const relations_locations = relations(locations, ({ one }) => ({
  logo: one(media, {
    fields: [locations.logo],
    references: [media.id],
    relationName: "logo",
  }),
}));
export const relations_events = relations(events, ({ one }) => ({
  image: one(media, {
    fields: [events.image],
    references: [media.id],
    relationName: "image",
  }),
  location: one(locations, {
    fields: [events.location],
    references: [locations.id],
    relationName: "location",
  }),
}));
export const relations__events_v = relations(_events_v, ({ one }) => ({
  parent: one(events, {
    fields: [_events_v.parent],
    references: [events.id],
    relationName: "parent",
  }),
  version_image: one(media, {
    fields: [_events_v.version_image],
    references: [media.id],
    relationName: "version_image",
  }),
  version_location: one(locations, {
    fields: [_events_v.version_location],
    references: [locations.id],
    relationName: "version_location",
  }),
}));
export const relations_purchases_rels = relations(
  purchases_rels,
  ({ one }) => ({
    parent: one(purchases, {
      fields: [purchases_rels.parent],
      references: [purchases.id],
      relationName: "_rels",
    }),
    eventsID: one(events, {
      fields: [purchases_rels.eventsID],
      references: [events.id],
      relationName: "events",
    }),
    merchID: one(merch, {
      fields: [purchases_rels.merchID],
      references: [merch.id],
      relationName: "merch",
    }),
  }),
);
export const relations_purchases = relations(purchases, ({ many }) => ({
  _rels: many(purchases_rels, {
    relationName: "_rels",
  }),
}));
export const relations_merch = relations(merch, () => ({}));
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: "media",
    }),
    locationsID: one(locations, {
      fields: [payload_locked_documents_rels.locationsID],
      references: [locations.id],
      relationName: "locations",
    }),
    eventsID: one(events, {
      fields: [payload_locked_documents_rels.eventsID],
      references: [events.id],
      relationName: "events",
    }),
    purchasesID: one(purchases, {
      fields: [payload_locked_documents_rels.purchasesID],
      references: [purchases.id],
      relationName: "purchases",
    }),
    merchID: one(merch, {
      fields: [payload_locked_documents_rels.merchID],
      references: [merch.id],
      relationName: "merch",
    }),
  }),
);
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: "_rels",
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: "users",
    }),
  }),
);
export const relations_payload_preferences = relations(
  payload_preferences,
  ({ many }) => ({
    _rels: many(payload_preferences_rels, {
      relationName: "_rels",
    }),
  }),
);
export const relations_payload_migrations = relations(
  payload_migrations,
  () => ({}),
);

type DatabaseSchema = {
  enum_events_status: typeof enum_events_status;
  enum__events_v_version_status: typeof enum__events_v_version_status;
  users: typeof users;
  media: typeof media;
  locations: typeof locations;
  events: typeof events;
  _events_v: typeof _events_v;
  purchases: typeof purchases;
  purchases_rels: typeof purchases_rels;
  merch: typeof merch;
  payload_locked_documents: typeof payload_locked_documents;
  payload_locked_documents_rels: typeof payload_locked_documents_rels;
  payload_preferences: typeof payload_preferences;
  payload_preferences_rels: typeof payload_preferences_rels;
  payload_migrations: typeof payload_migrations;
  relations_users: typeof relations_users;
  relations_media: typeof relations_media;
  relations_locations: typeof relations_locations;
  relations_events: typeof relations_events;
  relations__events_v: typeof relations__events_v;
  relations_purchases_rels: typeof relations_purchases_rels;
  relations_purchases: typeof relations_purchases;
  relations_merch: typeof relations_merch;
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels;
  relations_payload_locked_documents: typeof relations_payload_locked_documents;
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels;
  relations_payload_preferences: typeof relations_payload_preferences;
  relations_payload_migrations: typeof relations_payload_migrations;
};

declare module "@payloadcms/db-vercel-postgres" {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema;
  }
}
